#!/bin/bash

SRCDIR=$(grep 'SRCDIR' /etc/mailcleaner.conf | cut -d ' ' -f3)
if [ "$SRCDIR" = "" ]; then
    SRCDIR=/usr/mailcleaner
fi

VARDIR=$(grep 'VARDIR' /etc/mailcleaner.conf | cut -d ' ' -f3)
if [ "$VARDIR" = "" ]; then
    VARDIR=/var/mailcleaner
fi

export PATH="${SRCDIR}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/var/mailcleaner/.pyenv/bin"

# This update is a summation of all previous updates. For fresh installations, all of these steps will have been completed already. This script is necessary only for older installations which may have been behind on updates.
BD=$(lsblk | head -n 2 | tail -n 1 | awk '{ print $1 }')
if [ -e /dev/${BD}1 ]; then
    INSTALLATION_DATE=$(tune2fs -l /dev/${BD}1 | grep 'Filesystem created:' | awk '{ print $7 }' 2>/dev/null)
else
    INSTALLATION_DATE=$(tune2fs -l /dev/${BD} | grep 'Filesystem created:' | awk '{ print $7 }' 2>/dev/null)
fi
LATEST_UPDATE=$(ls $VARDIR/spool/updater/ | tail -n1)
if [[ $INSTALLATION_DATE -gt 2024 ]]; then
    echo "Repeating updates unnecessary for new installations."
    set_version 2025 02 04 "New installation"
    return 0
elif [[ $LATEST_UPDATE == "92_update_ssh_host_keys" ]]; then
    echo "All updates already installed from old repository."
    set_version 2025 02 04 "Changed updater repository"
    return 0
fi

function check_mclib_version() {
    IMPORT_MC_LIB=$(su - mailcleaner -c '/var/mailcleaner/.pyenv/shims/python3 -c "import mailcleaner"')
    if [ $? -eq 1 ]; then
        echo "0"
    fi
    echo $(su - mailcleaner -c 'cd /var/mailcleaner/.pyenv; shims/pip3 show mailcleaner-library' | grep Version | cut -d' ' -f2)
}

echo "Configuring keys"
if [[ ! -e /root/.ssh/id_rsa_internal ]]; then
    if [[ ${ISMASTER} == "Y" ]]; then
        ${SRCDIR}/bin/check_db.pl --update
        ${SRCDIR}/bin/internal_access --generate --propagate --install
    else
        echo "Missing internal key but not on Master. Waiting 120s to ensure that Master has configured its keys"
        sleep 120
        ${SRCDIR}/bin/internal_access --install
    fi
    cat <<EOF >> ~/.ssh/config
Host *
    IdentityFile ~/.ssh/id_rsa_internal
    IdentityFile ~/.ssh/id_rsa
EOF
fi

echo "Setting sysctl variables..."
if grep -q net.ipv4.tcp_window_scaling <<< `cat /etc/sysctl.conf`; then
    sed -i 's/net.ipv4.tcp_window_scaling = ./net.ipv4.tcp_window_scaling = 0/' /etc/sysctl.conf
else 
    echo "net.ipv4.tcp_window_scaling = 0" >> /etc/sysctl.conf
fi

echo "Updating SSL CA certificates..."
cat <<EOF > /etc/ssl/certs/isrgrootx1.pem.txt
-----BEGIN CERTIFICATE-----
MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw
TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4
WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu
ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY
MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc
h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+
0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U
A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW
T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH
B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC
B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv
KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn
OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn
jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw
qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI
rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV
HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq
hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL
ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ
3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK
NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5
ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur
TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC
jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc
oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq
4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA
mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d
emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=
-----END CERTIFICATE-----
EOF
sed -i 's/mozilla\/DST_Root_CA_X3.crt/!mozilla\/DST_Root_CA_X3.crt/' /etc/ca-certificates.conf 
update-ca-certificates

echo "Updating configurations for root user"
cd /root
for file in .bashrc .bash_profile; do
    echo "Removing Pyenv setup from /root/${file}"
    sed -i -z 's/export PYENV_ROOT="\/var\/mailcleaner\/.pyenv"\
export PATH="$PYENV_ROOT\/bin:$PATH"\
if command -v pyenv 1>\/dev\/null 2>&1; then\
  eval "$(pyenv init -)"\
fi//g' /root/${file}
    if ! grep -Fq ". \${SRCDIR}/.bashrc" /root/${file}; then
        echo "source \${SRCDIR}/.bashrc" >> /root/${file}
    fi
done
sed -i 's/.*Updater4MC\/updater4mc.sh.*\&>.*/30 22 \* \* \*  \/root\/Updater4MC\/updater4mc.sh >\/dev\/null 2>\&1/' /var/spool/cron/crontabs/root
echo "3.7.7" > /root/.python-version
cat <<EOT > /root/.bash_profile
umask 022
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/sbin:/sbin:/usr/mailcleaner/bin
export PYENV_ROOT="/var/mailcleaner/.pyenv"
export PATH="\$PYENV_ROOT/bin:\$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
    eval "\$(pyenv init -)"
fi
host_name=\$(cat /etc/mailcleaner.conf | grep HELONAME | cut -d" " -f3)
if [ "\$host_name" == "" ]; then
    host_name="mailcleaner"
fi
PS1='\u@\[\033[1;91m\]\
\`echo \$host_name\`\
\[\033[1;00m\]\
\[\033[00;37m\]\
\[\033[1;00m\]:\w$ '
EOT
if [ ! -f /etc/vim/vimrc.local ]; then
    echo "set bg=dark" >> /etc/vim/vimrc.local
    echo "syntax on" >> /etc/vim/vimrc.local
    echo "set hlsearch" >> /etc/vim/vimrc.local
fi
source $SRCDIR/.bashrc

echo "Updating Repositories"
rm /etc/apt/sources.list
if [ -e /etc/apt/sources.list.d/mailcleaner.list ]; then
    rm /etc/apt/sources.list.d/mailcleaner.list
fi
if [ -e /etc/apt/sources.list.d/docker.list ]; then
    rm /etc/apt/sources.list.d/docker.list
fi
if [[ ! -d /etc/apt/sources.list.d ]]; then
    mkdir /etc/apt/sources.list.d
fi
cat << EOF > /etc/apt/sources.list
deb http://archive.debian.org/debian/ jessie main contrib non-free
deb-src http://archive.debian.org/debian/ jessie main contrib non-free
deb http://archive.debian.org/debian-security/ jessie/updates main contrib non-free
deb-src http://archive.debian.org/debian-security/ jessie/updates main contrib non-free
EOF
apt-get --allow-unauthenticated update 2>&1 >/dev/null
apt-get --allow-unauthenticated -f install 2>&1 >/dev/null
apt-get --allow-unauthenticated install -y apt-transport-https curl 2>&1 >/dev/null
echo 'deb http://cdnmcpool.mailcleaner.net jessie main' > /etc/apt/sources.list.d/mailcleaner.list
echo 'deb [arch=amd64] https://download.docker.com/linux/debian jessie stable' > /etc/apt/sources.list.d/mailcleaner.list
curl -fsSL https://mailcleanerdl.alinto.net/downloads/mailcleaner.gpg --insecure | apt-key add - >/dev/null
curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - >/dev/null
apt-get --allow-unauthenticated update 2>&1 >/dev/null

echo "Installing core packages"
export DEBIAN_FRONTEND=noninteractive
apt-get update && sudo apt-get install --force-yes -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -o Dpkg::Options::="--force-confmiss" \
  ca-certificates wget aria2 git curl xz-utils fail2ban libperlio-gzip-perl \
  make build-essential llvm libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
  libsqlite3-dev libncurses5-dev libncursesw5-dev tk-dev libffi-dev liblzma-dev \
  libdata-validate-ip-perl libswitch-perl swaks ipset mc-exim prce2 mc-clamav \
  cpanminus

echo "Installing all Perl libraries, if missing"
${SRCDIR}/install/install_perl_libs.sh 2>&1 >/dev/null
/usr/bin/cpanm Math::Int128 2>&1 >/dev/null
/usr/bin/cpanm IPC::Run 2>&1 >/dev/null

echo "Updating databases"
${SRCDIR}/etc/init.d/mysql_master start
${SRCDIR}/etc/init.d/mysql_slave start
ISMASTER=`grep 'ISMASTER' /etc/mailcleaner.conf | cut -d ' ' -f3`
if [ "$ISMASTER" = "Y" ] || [ "$ISMASTER" = "y" ]; then
    ${SRCDIR}/bin/mc_mysql -m mc_spool <${SRCDIR}/install/dbs/t_sp_spam.sql
fi
${SRCDIR}/bin/mc_mysql -s mc_spool <${SRCDIR}/install/dbs/t_sp_spam.sql
${SRCDIR}/bin/check_db.pl -m --update
${SRCDIR}/bin/check_db.pl -s --update
${SRCDIR}/bin/check_db.pl -m --myrepair
${SRCDIR}/bin/check_db.pl -s --myrepair
echo "UPDATE mta_config SET rbls = replace(rbls, 'SPAMHAUS ', '');" | mc_mysql -m mc_config
echo "UPDATE PreRBLs SET lists = replace(lists, 'SPAMHAUS ', '');"  | mc_mysql -m mc_config
echo "UPDATE UriRBLs SET rbls = replace(rbls, 'SPAMHAUS ', '');" | mc_mysql -m mc_config
echo "UPDATE antispam SET sa_rbls = replace(sa_rbls, 'SPAMHAUS ', '');" | mc_mysql -m mc_config
${SRCDIR}/bin/resync_db.sh
echo 'DROP TABLE IF EXISTS "spam";' > /tmp/mc_spool_add_index.sql
for i in a b c d e f g h i j k l m misc n num o p q r s t u v w x y z; do 
    echo "alter ignore table spam_$i add unique index to_eximid (to_domain, to_user, exim_id);" >> /tmp/mc_spool_add_index.sql
done
cat >> /tmp/mc_spool_add_index.sql <<EOF
CREATE TABLE "spam" (   "date_in" date NOT NULL,   "time_in" time NOT NULL,   "to_domain" varchar(100) NOT NULL,   "to_user" varchar(100) NOT NULL,   "sender" varchar(120) NOT NULL,   "exim_id" varchar(16) NOT NULL,   "M_date" varchar(50) DEFAULT NULL,   "M_subject" varchar(250) DEFAULT NULL,   "forced" enum('1','0') NOT NULL DEFAULT '0',   "in_master" enum('1','0') NOT NULL DEFAULT '0',   "store_slave" int(11) NOT NULL,   "M_rbls" varchar(250) DEFAULT NULL,   "M_prefilter" varchar(250) DEFAULT NULL,   "M_score" decimal(7,3) DEFAULT NULL,   "M_globalscore" int(11) DEFAULT NULL,   "is_newsletter" ENUM('1', '0') NOT NULL DEFAULT '0',   KEY "exim_id_idx" ("exim_id"),   KEY "to_user_idx" ("to_user","to_domain"),   KEY "date_in_idx" ("date_in"), unique index to_eximid (to_domain, to_user, exim_id) );
ALTER TABLE spam ENGINE=merge UNION=("spam_a","spam_b","spam_c","spam_d","spam_e","spam_f","spam_g","spam_h","spam_i","spam_j","spam_k","spam_l","spam_m","spam_n","spam_o","spam_p","spam_q","spam_r","spam_s","spam_t","spam_u","spam_v","spam_w","spam_x","spam_y","spam_z","spam_num","spam_misc") INSERT_METHOD=last;
EOF
sed -i 's/"/`/g' /tmp/mc_spool_add_index.sql
${SRCDIR}/bin/mc_mysql -m mc_spool < /tmp/mc_spool_add_index.sql
${SRCDIR}/bin/mc_mysql -s mc_spool < /tmp/mc_spool_add_index.sql
echo "UPDATE domain_pref SET reject_capital_domain=0" | ${SRCDIR}/bin/mc_mysql -m mc_config
echo "ALTER TABLE maillog ADD content_forced enum('1','0') NOT NULL DEFAULT '0';" | mc_mysql -s mc_stats

echo "Patching MailScanner"
#TODO Check before applying MailScanner patches
sed -r 's:(chmod )0700(.*dir.*unpackdir.*):\10777\2:' -i /opt/MailScanner/lib/MailScanner/TNEF.pm
sed -i  's/\^-(\\w+/\^--?(\\w+/' /opt/MailScanner/lib/MailScanner/Exim.pm 
cd /opt/MailScanner/lib/MailScanner/
if grep -q 'MailCleaner to whitelist HTML controls' /opt/MailScanner/lib/MailScanner/Message.pm; then
    echo "Whitelist of HTML control already supported"
else
    cp -f /root/Updater4MC/resources/HTML_wl.patch /opt/MailScanner/lib/MailScanner/
    cp Message.pm Message.pm_HTML_controls
    patch -i HTML_wl.patch Message.pm
    rm -f HTML_wl.patch
    cp -f /root/Updater4MC/resources/HTML_wl_ip.patch /opt/MailScanner/lib/MailScanner/
    cp Message.pm Message.pm_HTML_controls_ips
    patch -i HTML_wl_ip.patch Message.pm
    rm -f HTML_wl_ip.patch
fi
if grep -q 'DisarmInsideHead' /opt/MailScanner/lib/MailScanner/Message.pm; then
    echo "Disarming of tags in Head already disabled"
else
    cp -f /root/Updater4MC/resources/MS_hide_script.patch /opt/MailScanner/lib/MailScanner/
    cp Message.pm Message.pm_hide_scripts
    patch -i MS_hide_script.patch Message.pm
    rm -f MS_hide_script.patch
    cp -f /root/Updater4MC/resources/MS_hide_script2.patch /opt/MailScanner/lib/MailScanner/
    cp Message.pm Message.pm_hide_scripts
    patch -i MS_hide_script2.patch Message.pm
    rm -f MS_hide_script2.patch
fi
if grep -q 'InitEsetsEFSParser' /opt/MailScanner/lib/MailScanner/SweepViruses.pm; then
    echo "ESET availability in SweepViruses already enabled"
else
    cp -f /root/Updater4MC/resources/73_Add_ESET_EFS_AV_support_SweepViruses.patch /opt/MailScanner/lib/MailScanner/
    cp SweepViruses.pm SweepViruses.pm_add_esetefs_av
    patch -i 73_Add_ESET_EFS_AV_support_SweepViruses.patch SweepViruses.pm
    rm -f 73_Add_ESET_EFS_AV_support_SweepViruses.patch
fi
cd -
if grep -q 'EximCommand' /opt/MailScanner/lib/MailScanner/ConfigDefs.pl; then
    echo "Long ID support already enabled"
else
    cp -f /root/Updater4MC/resources/MailScanner_long_ids.patch /opt/MailScanner/bin/
    cp -f /root/Updater4MC/resources/ConfigDefs.pl_long_ids.patch /opt/MailScanner/lib/MailScanner/
    cp -f /root/Updater4MC/resources/EximDiskStore.pm_long_ids.patch /opt/MailScanner/lib/MailScanner/
    cd /opt/MailScanner/bin
    cp MailScanner MailScanner_long_ids
    patch -i MailScanner_long_ids.patch MailScanner
    rm -f MailScanner_long_ids.patch 
    cd -
    cd /opt/MailScanner/lib/MailScanner/
    cp ConfigDefs.pl ConfigDefs.pl_long_ids
    patch -i ConfigDefs.pl_long_ids.patch ConfigDefs.pl
    rm -f ConfigDefs.pl_long_ids.patch
    cp EximDiskStore.pm EximDiskStore.pm_long_ids
    patch -i EximDiskStore.pm_long_ids.patch EximDiskStore.pm
    rm -f EximDiskStore.pm_long_ids.patch
    cd -
fi
if [ ! -e /opt/MailScanner/lib/esetsefs-wrapper ]; then
    cat <<EOF > /opt/MailScanner/lib/esetsefs-wrapper
#!/bin/bash

# esetsefs-wrapper --    invoke esets efs for use with mailscanner
#
#   MailScanner - SMTP Email Processor
#   Copyright (C) 2021 MailScanner Team <https://mailscanner.info>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#      https://www.mailscanner.info
#
#
PackageDir=$1
shift
Prog=odscan
Log=lslog
Epoch=\$(date +%s)

if [ "x$1" = "x-IsItInstalled" ]; then
  [ -x \${PackageDir}/\$Prog ] && exit 0
  exit 1
fi

sudo \${PackageDir}/\$Prog "$@"
if [ $? -eq 50 -o $? -eq 1 ]; then
  # Threat(s) found
  LogFile=\$(mktemp) || { echo "$0: Cannot create temporary file" >&2; exit 1; }
  umask 077
  rm -f \$LogFile
  # Grab just the end of the log to save on parsing
  sudo \${PackageDir}/\$Log -c -s --with-log-name | tail -n1000 >\$LogFile 2>&1
  # Output detections in current path on or after timestamp
  Dir=\$@
  oldIFS="\$IFS"
  IFS=''
  while read -r p || [ -n "\$p" ]
  do
    if [[ \$p =~ ^[0-9] ]]; then
      Date=\$(echo \$p | awk -F',' '{print \$1}')
      Epoch2=\$(date --date="\$Date" +%s)
      if [ \$Epoch2 -ge \$Epoch ]; then
        # Grab detections and filter to scan directory
        logID=\$(echo \${p##*,} | tr -d '\r')
        sudo \${PackageDir}/\$Log -c --ods-detections=\$logID | grep \${Dir##*\ } 2>&1
      fi
    fi
  done < \$LogFile
  IFS=\$oldIFS
  rm -f \$LogFile
elif [ \$? -eq 100 ]; then
  # Scan failed
  exit 1
fi

exit 0
EOF
    echo "/opt/MailScanner/lib/esetsefs-wrapper added."
fi
chmod +x /opt/MailScanner/lib/esetsefs-wrapper

if [ ! -e /opt/MailScanner/lib/esetsefs-autoupdate ]; then
    cat <<EOF > /opt/MailScanner/lib/esetsefs-autoupdate
#!/usr/bin/perl

use Sys::Syslog;

# Remove the next line if you actually want to do something with this!
exit 0;
EOF
    echo "/opt/MailScanner/lib/esetsefs-autoupdate added."
fi
chmod +x /opt/MailScanner/lib/esetsefs-autoupdate

if [ ! -e /etc/sudoers.d/esetsefs-sudoers ]; then
    cat <<EOF > /etc/sudoers.d/esetsefs-sudoers
mailcleaner ALL=(ALL) NOPASSWD: /opt/eset/efs/bin/odscan
mailcleaner ALL=(ALL) NOPASSWD: /opt/eset/efs/bin/lslog
EOF
    echo "/etc/sudoers.d/esetsefs-sudoers added."
fi

if [[ ! $(echo "select id from scanner where name='esetsefs'" | ${SRCDIR}/bin/mc_mysql -m mc_config) ]]; then
    echo "insert into scanner values (NULL,'esetsefs','ESET EFS',0,'/opt/eset/efs/bin',0,'9.0','')" | ${SRCDIR}/bin/mc_mysql -m mc_config
fi

echo "Patching SpamAssassin"
sed -i 's/CONF_TYPE_DURATIION/CONF_TYPE_DURATION/' /usr/local/share/perl/5.20.2/Mail/SpamAssassin/Plugin/Razor2.pm
words='__RCVD_IN_ZEN RCVD_IN_SBL RCVD_IN_XBL RCVD_IN_PBL URIBL_SBL URIBL_DBL_SPAM URIBL_DBL_REDIR URIBL_DBL_ERROR';
for i in $words ; do
    sed -i "/$i/d" /var/lib/spamassassin/3.004000/updates_spamassassin_org/* ;
done
if [ -e ${SRCDIR}/share/spamassassin/mails_without_LOM ]; then
    for i in `cat ${SRCDIR}/share/spamassassin/mails_without_LOM`; do echo "insert into wwlists (recipient, type, comments) values ('$i', 'SpamC', 'MC_LOTS_OF_MONEY -2.0');" | mc_mysql -m mc_config ; done
fi

echo "Creating potentially missing files/directories"
if [[ $SH -eq 0 ]]; then
    if [ -e ${SRCDIR}/etc/rbls/SPAMHAUSSBL.cf ]; then
        echo "${SRCDIR}/etc/rbls/SPAMHAUSSBL.cf already exists. Skipping."
    else
        cat <<EOF > ${SRCDIR}/etc/rbls/SPAMHAUSSBL.cf
name=SPAMHAUSSBL
type=IPRBL
dnsname=INACTIVE.zen.dq.spamhaus.net
sublist=127.0.0.\d+,SPAMHAUSDQS,SpamHaus IP blocklist
EOF
        echo "SpamHaus IP Blocklist added."
    fi
fi
if [ -e ${SRCDIR}/etc/rbls/SPAMHAUSDBL.cf ]; then
    echo "${SRCDIR}/etc/rbls/SPAMHAUSDBL.cf already exists. Skipping."
else
    cat <<EOF > ${SRCDIR}/etc/rbls/SPAMHAUSDBL.cf
name=SPAMHAUSDBL
type=URIRBL
dnsname=INACTIVE.dbl.dq.spamhaus.net
sublist=127.0.1.(1?\d\d?|2[0-4]\d|25[0-4]),SPAMHAUSDBL,Spamhaus domain blocklist
callonip=1
ishbl=0
EOF
    echo "SpamHaus Domain Blocklist added."
fi
if [ -e ${SRCDIR}/etc/rbls/SPAMHAUSZRD.cf ]; then
    echo "${SRCDIR}/etc/rbls/SPAMHAUDZRD.cf already exists. Skipping."
else
    cat <<EOF > ${SRCDIR}/etc/rbls/SPAMHAUSZRD.cf
name=SPAMHAUSZRD
type=URIRBL
dnsname=INACTIVE.zrd.dq.spamhaus.net
sublist=127.0.0.\d+,SPAMHAUSZRD,Spamhaus Zero Reputation list
callonip=0
ishbl=0
EOF
    echo "SpamHaus Zero Reputation list added."
fi
if [ -e ${SRCDIR}/etc/rbls/SPAMHAUSHBL.cf ]; then
    echo "${SRCDIR}/etc/rbls/SPAMHAUDHBL.cf already exists. Skipping."
else
    cat <<EOF > ${SRCDIR}/etc/rbls/SPAMHAUSHBL.cf
name=SPAMHAUSHBL
type=URIRBL
dnsname=INACTIVE.hbl.dq.spamhaus.net
sublist=127.0.0.\d+,SPAMHAUSHBL,Spamhaus Hash blocklist
callonip=0
ishbl=1
EOF
    echo "SpamHaus Hash Blocklist added."
fi
if [ ! -d "/var/mailcleaner/flags/fail2ban" ]; then
    mkdir /var/mailcleaner/flags/fail2ban
fi 
if [ ! -f "/var/mailcleaner/log/exim_stage1/rejectlog" ]; then
    touch /var/mailcleaner/log/exim_stage1/rejectlog
    chown mailcleaner:mailcleaner /var/mailcleaner/log/exim_stage1/rejectlog
    chmod 640 /var/mailcleaner/log/exim_stage1/rejectlog
fi
if [ ! -f "/var/mailcleaner/log/apache/mc_auth.log" ]; then
    chown mailcleaner:mailcleaner /var/mailcleaner/log/apache/mc_auth.log
    chmod 644 /var/mailcleaner/log/apache/mc_auth.log
fi
if [ ! -d "/var/mailcleaner/flags/exim/stage1/" ]; then
    mkdir -p /var/mailcleaner/flags/exim/stage1/
fi
if [ ! -d "/var/mailcleaner/flags/www/user_auth/" ]; then
    mkdir -p /var/mailcleaner/flags/www/user_auth/
fi
touch /var/mailcleaner/flags/fail2ban/empty_file
touch /var/mailcleaner/log/apache/mc_auth.log
touch /var/mailcleaner/spool/mailcleaner/full_whitelisted_senders.list

echo "Removing unnecessary files and directories"
if [ -e ${SRCDIR}/etc/rbls/SPAMHAUS.cf ]; then
    rm ${SRCDIR}/etc/rbls/SPAMHAUS.cf
fi
if [ -e ${SRCDIR}/etc/rbls/SURBL.cf ]; then
    rm ${SRCDIR}/etc/rbls/SURBL.cf
fi
if [ -e /var/mailcleaner/tmp/fetch_files${SRCDIR}/etc/rbls/SURBL.cf ]; then
    rm /var/mailcleaner/tmp/fetch_files${SRCDIR}/etc/rbls/SURBL.cf
fi
cd $SRCDIR
FILES="share/newsld/siteconfig/L_Dutch.cf share/newsld/siteconfig/K_Senders.cf share/newsld/siteconfig/L_Danish.cf share/newsld/siteconfig/L_Deutsch.cf share/newsld/siteconfig/L_English.cf share/newsld/siteconfig/L_French.cf share/newsld/siteconfig/L_Italian.cf share/newsld/siteconfig/L_Suedish.cf share/newsld/siteconfig/P_Products.cf share/newsld/siteconfig/X_Mailer.cf";
for FILE in $FILES; do
    if [[ -e $SRCDIR/$FILE ]]; then
        echo "Removing $FILE from main git tree"
        git rm --force $SRCDIR/$FILE
        if [[ $? -ne 0 ]]; then
            if [ ! -e /usr/maicleaner/$FILE ]; then
                echo "This is fine because $FILE never existed"
            fi
        fi
    fi
done

echo "Checking Pyenv..."
export PYENV_ROOT="/var/mailcleaner/.pyenv"
export PYENV_VERSION=3.7.7
if [[ -e $PYENV_ROOT ]]; then
    eval "$(pyenv init -)"
fi
if [[ -z $PYENV_SHELL ]]; then
    echo "It appears that Pyenv is not installed..."
    chown mailcleaner:mailcleaner ${SRCDIR}/install/install_pyenv_3-7-7.sh
    sudo -u mailcleaner ${SRCDIR}/install/install_pyenv_3-7-7.sh >  /dev/null 2>&1 &
    cd -
fi

echo "Configuring Fail2Ban..."
if [ ! -L /etc/init.d/fail2ban ]; then
    rm /etc/init.d/fail2ban
    ln -s ${SRCDIR}/etc/init.d/fail2ban /etc/init.d/fail2ban
fi
if ! crontab -l |grep "fail2ban.py cron-job"; then
    crontab -l | { cat; echo "*/5 * * * * PYENV_VERSION=3.7.7; /var/mailcleaner/.pyenv/versions/3.7.7/bin/fail2ban.py cron-job >/dev/null 2>&1"; } | crontab -
else
    crontab -l | sed 's/fail2ban.py.*/fail2ban.py internal cron-job > \/dev\/null 2>\&1 /' | crontab -
fi
${SRCDIR}/etc/init.d/fail2ban stop
echo 'UPDATE fail2ban_ips SET jail="mc-exim" WHERE jail LIKE "%mc-exim%";' | mc_mysql -m mc_config
echo 'UPDATE fail2ban_ips SET jail="mc-ssh" WHERE jail LIKE "%mc-ssh%";' | mc_mysql -m mc_config
echo 'UPDATE fail2ban_ips SET jail="mc-webauth" WHERE jail LIKE "%mc-webauth%";' | mc_mysql -m mc_config
echo 'UPDATE fail2ban_conf SET chain="INPUT";' | mc_mysql -m mc_config
echo "UPDATE fail2ban_conf SET chain='INPUT' where chain <> 'FORWARD'" | mc_mysql -m mc_config
if ! grep notifempty /etc/logrotate.d/fail2ban > /dev/null; then
  sed -i 's/ compress/&\n    notifempty/' /etc/logrotate.d/fail2ban
fi

echo "Installing MailCleaner Python library..."
MC_LIB_VERSION=check_mclib_version
if [[ "$MC_LIB_VERSION" < "1.1.5" ]]; then
    echo "Did not find MailCleaner Library"
    su - mailcleaner -c "pip install mailcleaner-library==1.1.5 --trusted-host repository.mailcleaner.net --index https://repository.mailcleaner.net/python/ --extra-index https://pypi.org/simple/"
    if [[ "$MC_LIB_VERSION" == "0" ]]; then
        master_raw=$(echo "SELECT hostname, password FROM master"| mc_mysql -s mc_config 2>&1)
        conf_arr=(MASTERIP MASTERPWD)
        if echo "$master_raw" | grep "ERROR"; then
            echo -e "[Errno 2]: Can't connect to slave database Exiting...\e[0m"
            exit 2
        else
            master_arr=($(echo "$master_raw" |tail -n +2))
            for i in  0 1
            do
                if ! grep "${conf_arr[$i]}" /etc/mailcleaner.conf; then
                    echo "${conf_arr[$i]} = ${master_arr[$i]}" >> /etc/mailcleaner.conf
                fi
            done
        fi
    fi
fi
echo 'DELETE from fail2ban_jail' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-webauth-1d",5,3600,86400,"80,443","mc-webauth-filter","mc-ipset","/var/mailcleaner/log/apache/mc_auth.log",-1, 0);' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-ssh-1d",3,3600,86400,"22","sshd","mc-ipset","/var/log/auth.log",-1, 0);' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-exim-1d",5,3600,86400,"25,465,587","mc-exim-filter","mc-ipset","/var/mailcleaner/log/exim_stage1/rejectlog",-1, 0);' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-webauth-1w",10,1209600,604800,"80,443","mc-webauth-filter","mc-ipset","/var/mailcleaner/log/apache/mc_auth.log",-1, 0);' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-ssh-1w",6,1209600,604800,"22","sshd","mc-ipset","/var/log/auth.log",-1, 0);' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-exim-1w",10,1209600,604800,"25,465,587","mc-exim-filter","mc-ipset","/var/mailcleaner/log/exim_stage1/rejectlog",-1, 0);' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-webauth-1m",15,1209600,2678400,"80,443","mc-webauth-filter","mc-ipset","/var/mailcleaner/log/apache/mc_auth.log",-1, 0);' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-ssh-1m",9,1209600,2678400,"22","sshd","mc-ipset","/var/log/auth.log",-1, 0);' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-exim-1m",15,1209600,2678400,"25,465,587","mc-exim-filter","mc-ipset","/var/mailcleaner/log/exim_stage1/rejectlog",-1, 0);' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-webauth-1y",20,5356800,20586000,"80,443","mc-webauth-filter","mc-ipset","/var/mailcleaner/log/apache/mc_auth.log",-1, 0);' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-ssh-1y",12,5356800,20586000,"22","sshd","mc-ipset","/var/log/auth.log",-1, 0);' | mc_mysql -m mc_config
echo 'INSERT INTO fail2ban_jail (enabled,name,maxretry,findtime,bantime,port,filter,banaction,logpath,max_count,send_mail_bl) VALUES (0,"mc-exim-1y",20,5356800,20586000,"25,465,587","mc-exim-filter","mc-ipset","/var/mailcleaner/log/exim_stage1/rejectlog",-1, 0);' | mc_mysql -m mc_config
sysadmin=$(echo "SELECT sysadmin from system_conf;" | mc_mysql -s mc_config |tail -1)
if [[ ! $(echo "select * from fail2ban_conf" | ${SRCDIR}/bin/mc_mysql -s mc_config) ]]; then
    echo 'INSERT INTO fail2ban_conf (src_email, src_name, dest_email) VALUES ("fail2ban@mailcleaner", "MailCleaner - Fail2Ban", "'${sysadmin}'");' | mc_mysql -m mc_config
fi
${SRCDIR}/bin/resync_db.sh
$SRCDIR/bin/dump_firewall.pl
dump_fail2ban_config.py

echo "Updating crontab..."
/usr/bin/crontab -l | sed -r '/watchdogs(.pl (dix|oneday)|_report.sh)$/ s/$/ 2>\/dev\/null/' > /tmp/crontab.new
OLD_SIZE=$(wc -c <<< `/usr/bin/crontab -l`)
NEW_SIZE=$(wc -c <<< `cat /tmp/crontab.new`)
if [[ $NEW_SIZE -ge $OLD_SIZE ]]; then
    /usr/bin/crontab /tmp/crontab.new
fi

echo "Enabling ed25519 keys..."
if grep -Fqv "HostKey /etc/ssh/ssh_host_ed25519_key" <<< `cat /etc/ssh/sshd_config`; then
    echo "Need to add config line"
    sed -i -e 's/\(\/etc\/ssh\/ssh_host_\)\(rsa_key\)/\1\2\nHostKey \1ed25519_key/' /etc/ssh/sshd_config
    echo "Restarting SSH"
    /etc/init.d/ssh restart
fi
if grep -Fqv "HostKey /etc/ssh/ssh_host_ed25519_key" <<< `cat /etc/ssh/sshd_config`; then
    echo "Failed to add config line"
fi

echo "Fixing potential PuTTY SSH problem..."
service ssh stop
sed -i '/MaxAuthTries/d' /etc/ssh/sshd_config
cat >> /etc/ssh/sshd_config <<EOF 
# Allow for deeply nested connections, required for some SSH agents/password managers
MaxAuthTries 30
EOF
service ssh start

echo "Removing Depricated RBL for SORBS..."
SMTP=$(echo 'SELECT rbls FROM mta_config WHERE stage = 1;' | $SRCDIR/bin/mc_mysql -m mc_config)
SMTP=$(echo $SMTP | cut -d' ' -f 2-);
if grep -q 'SORBS' <<< `echo $SMTP`; then
    echo "Removing SORBS from SMTP RBLs"
    SMTP=$(echo $SMTP | sed -r 's/(SORBS | SORBS|SORBS)//')
    echo "UPDATE mta_config SET rbls = '$SMTP' WHERE stage = 1;" | $SRCDIR/bin/mc_mysql -m mc_config
fi
PRERBL=$(echo 'SELECT lists FROM PreRBLs;' | $SRCDIR/bin/mc_mysql -m mc_config)
PRERBL=$(echo $PRERBL | cut -d' ' -f 2-);
if grep -q 'SORBS' <<< `echo $PreRBLs`; then
    echo "Removing SORBS from PreRBLs"
    PRERBL=$(echo $PRERBL | sed -r 's/(SORBS | SORBS|SORBS)//')
    echo "UPDATE PreRBLs SET lists = '$PRERBL';" | $SRCDIR/bin/mc_mysql -m mc_config
fi
SA=$(echo 'SELECT sa_rbls FROM antispam;' | $SRCDIR/bin/mc_mysql -m mc_config)
SA=$(echo $SA | cut -d' ' -f 2-);
if grep -q 'SORBS' <<< `echo $SA`; then
    echo "Removing SORBS from SpamC"
    SA=$(echo $SA | sed -r 's/(SORBS | SORBS|SORBS)//')
    echo "UPDATE antispam SET sa_rbls = '$SA';" | $SRCDIR/bin/mc_mysql -m mc_config
fi

echo "Removing Depricated RBL for Manitu..."
SMTP=$(echo 'SELECT rbls FROM mta_config WHERE stage = 1;' | $SRCDIR/bin/mc_mysql -m mc_config)
SMTP=$(echo $SMTP | cut -d' ' -f 2-);
if grep -q 'IXDNSBLMANITUNET' <<< `echo $SMTP`; then
    echo "Removing IXDNSBLMANITUNET from SMTP RBLs"
    SMTP=$(echo $SMTP | sed -r 's/(IXDNSBLMANITUNET | IXDNSBLMANITUNET|IXDNSBLMANITUNET)//')
    echo "UPDATE mta_config SET rbls = '$SMTP' WHERE stage = 1;" | $SRCDIR/bin/mc_mysql -m mc_config
fi
PRERBL=$(echo 'SELECT lists FROM PreRBLs;' | $SRCDIR/bin/mc_mysql -m mc_config)
PRERBL=$(echo $PRERBL | cut -d' ' -f 2-);
if grep -q 'IXDNSBLMANITUNET' <<< `echo $PreRBLs`; then
    echo "Removing IXDNSBLMANITUNET from PreRBLs"
    PRERBL=$(echo $PRERBL | sed -r 's/(IXDNSBLMANITUNET | IXDNSBLMANITUNET|IXDNSBLMANITUNET)//')
    echo "UPDATE PreRBLs SET lists = '$PRERBL';" | $SRCDIR/bin/mc_mysql -m mc_config
fi
SA=$(echo 'SELECT sa_rbls FROM antispam;' | $SRCDIR/bin/mc_mysql -m mc_config)
SA=$(echo $SA | cut -d' ' -f 2-);
if grep -q 'IXDNSBLMANITUNET' <<< `echo $SA`; then
    echo "Removing IXDNSBLMANITUNET from SpamC"
    SA=$(echo $SA | sed -r 's/(IXDNSBLMANITUNET | IXDNSBLMANITUNET|IXDNSBLMANITUNET)//')
    echo "UPDATE antispam SET sa_rbls = '$SA';" | $SRCDIR/bin/mc_mysql -m mc_config
fi

set_version 2025 01 15 "Updater4MC8 Cummulative updates"
